name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      platforms:
        description: 'Platforms to build for'
        required: true
        default: 'linux/amd64,linux/arm64'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      docker_tag: ${{ steps.validate.outputs.docker_tag }}
    steps:
      - name: Validate version format
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.0.0"
            exit 1
          fi
          DOCKER_TAG="${VERSION#v}"
          echo "✅ Version format is valid: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "docker_tag=$DOCKER_TAG" >> $GITHUB_OUTPUT

  create-tag:
    runs-on: ubuntu-latest
    needs: validate-version
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create git tag
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"
          echo "✅ Created and pushed tag: $VERSION"

  build-and-publish:
    runs-on: ubuntu-latest
    needs: [validate-version, create-tag]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.validate-version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-version.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate-version.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ github.event.inputs.platforms }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    runs-on: ubuntu-latest
    needs: [validate-version, create-tag, build-and-publish]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-version.outputs.version }}
          name: Release ${{ needs.validate-version.outputs.version }}
          body: |
            ## Docker Images
            
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-version.outputs.docker_tag }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
            
            ## Platforms
            
            - linux/amd64
            - linux/arm64
            
            ## Usage
            
            ```bash
            docker run -d \
              --name app \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-version.outputs.docker_tag }}
            ```
          draft: false
          prerelease: false